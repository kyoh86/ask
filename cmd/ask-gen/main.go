package main

import (
	"html/template"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"

	yaml "gopkg.in/yaml.v2"
)

func main() {
	genTypes()
	genPrototype()
}

func generate(definition interface{}, templateText, filename string) (retErr error) {
	buf, err := ioutil.ReadFile(filename + ".yaml")
	if err != nil {
		return err
	}
	if err := yaml.Unmarshal(buf, definition); err != nil {
		return err
	}

	out, err := os.OpenFile(filename+"_gen.go", os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer out.Close()

	tmp, err := template.New("definition").
		Funcs(template.FuncMap{"title": strings.Title}).
		Parse(templateText)
	if err != nil {
		return err
	}
	if err := tmp.Execute(out, map[string]interface{}{"definition": definition}); err != nil {
		return err
	}
	cmd := exec.Command("goimports", "-w", filename+"_gen.go")
	if err := cmd.Run(); err != nil {
		return err
	}
	return nil
}

func genTypes() {
	var types []struct {
		Type string `yaml:"type"`
		Conv string `yaml:"conv"`
	}

	var typesTemplate = `// Code generated by ask-gen. DO NOT EDIT!!

package ask

{{range .definition}}
// {{.Type|title}} takes {{.Type}} value from user input
func (h Handler) {{.Type|title}}() (*{{.Type}}, error) {
	var v {{.Type}}
	if err := h.{{.Type|title}}Var(&v).Do(); err != nil {
		return nil, err
	}
	return &v, nil
}

// {{.Type|title}} takes {{.Type}} value from user input
func {{.Type|title}}() (*{{.Type}}, error) {
  return static.{{.Type|title}}()
}

// {{.Type|title}} sets a {{.Type}} variable, "v" to accept user input
func (h Handler) {{.Type|title}}Var(v *{{.Type}}) Doer {
	return DoFunc(func() error {
		return h.AskFunc(func(input string) error {
			{{if .Conv -}}
			p, err := {{.Conv}}
			if err != nil {
				return err
			}
			*v = {{.Type}}(p)
			{{- else -}}
			*v = input
			{{- end}}
			return nil
		})
	})
}

// {{.Type|title}} sets a {{.Type}} variable, "v" to accept user input
func {{.Type|title}}Var(v *{{.Type}}) Doer {
  return {{.Type|title}}Var(v)
}
{{end}}
`

	if err := generate(&types, typesTemplate, "types"); err != nil {
		panic(err)
	}
}

func genPrototype() {
	var options []struct {
		Name string `yaml:"name"`
		Type string `yaml:"type"`
	}

	var prototypeTemplate = `// Code generated by ask-gen. DO NOT EDIT!!

package ask

// Prototype gives handler some options
type Prototype struct {
{{- range .definition}}
	{{.Name|title}} {{.Type}}
{{- end}}
}
{{range .definition}}
// {{.Name|title}} makes new Handler with new {{.Name|title}} option
func (h Handler) {{.Name|title}}(v {{.Type}}) *Handler {
	n := h.Prototype
	n.{{.Name|title}} = v
	return &Handler{Prototype: n}
}

// {{.Name|title}} makes new Handler with new {{.Name|title}} option
func {{.Name|title}}(v {{.Type}}) *Handler {
	return static.{{.Name|title}}(v)
}
{{end}}
`

	if err := generate(&options, prototypeTemplate, "prototype"); err != nil {
		panic(err)
	}
}
